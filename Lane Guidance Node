from rclpy.node import Node
from std_msgs.msg import Float32, Int32, Int32MultiArray
from geometry_msgs.msg import Twist
import time
import os
from sensor_msgs.msg import LaserScan
import math


NODE_NAME = 'lane_guidance_node'
CALIBRATION_NODE_NAME = 'calibration_node'
CENTROID_TOPIC_NAME = '/centroid'
ACTUATOR_TOPIC_NAME = '/cmd_vel'
SUBSCRIBER_TOPIC_NAME = '/LiDAR/LD06'


class PathPlanner(Node):
    def __init__(self):
        super().__init__(NODE_NAME)
        self.twist_publisher = self.create_publisher(Twist, ACTUATOR_TOPIC_NAME, 10)
        self.twist_cmd = Twist()
        
        #My personal attempt at subscribing to data from the calibration node 
        self.subscription = self.create_subscription(
            Float32,
            CALIBRATION_NODE_NAME,
            self.motion,
            10)
        self.subscription  # prevent unused variable warning
        
        #Subscriber to the Lidar 
        self.sub = rospy.Subscriber(SUBSCRIBER_TOPIC_NAME, LaserScan, self.detect_obstacle)
        self.viewing_angle = 360
        self.max_distance_tolerance = 1.2
        self.min_distance_tolerance = 0.15
        
        self.centroid_subscriber = self.create_subscription(Float32, CENTROID_TOPIC_NAME, self.controller, 10)
        self.centroid_subscriber

        # Default actuator values
        self.declare_parameters(
            
    #Here is a funciton I added for obstacle detection
    def detect_obstacle(self, data):
        total_number_of_scans = len(data.ranges)
        scans_per_degree = float(total_number_of_scans/self.viewing_angle)
        angle_values = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,355,350,345,340,335,330,325,320,315,310,305,300,295]
        range_values = []
        for angle in angle_values:
            bs = data.ranges[round(angle*scans_per_degree)]
            if self.max_distance_tolerance >= bs >= self.min_distance_tolerance:
                range_values.append(data.ranges[round(angle*scans_per_degree)])
            else:
                range_values.append(float(self.max_distance_tolerance)+1)
        min_distance = min(range_values)
        min_angle_index = range_values.index(min(range_values))
        min_angle = angle_values[min_angle_index]
        print('Min Distance %s at %s degrees.' %(str(min_distance),str(min_angle)))
        obstacle_info = []
        if self.max_distance_tolerance >= abs(min_distance) >= self.min_distance_tolerance:
            #make the angle nuegative if its on the right side
            if min_angle > 180: min_angle = min_angle - 360
            angle_rad = (min_angle * math.pi) / 180
            normalized_angle = math.sin(angle_rad)
            obstacle_detected = 1.0
        else:
            # nonsense values
            min_distance = -1.0
            normalized_angle = -1.0
            obstacle_detected = 0.0
            

            
    #Here is my personal function that should properly set the motion of the car
    def motion(self, msg, steering_float, throttle_float):
        #Here is how I want this code to go 
        #IF OBJECT DETECTED, AKA if obstacle_detected == 1.0, find which angle the object is, 
        #the variable "min_angle" from the detect_obstacle
        #function should tell you what angle the object is located 
        #There is a comment in the code of detect_obstacle that says that the min_angle variable is negative if
        #the object is to the right and positive if the object is to the LEFT
        #IF OBJECT NOT DETECTED, carry on with the code that is already in this function
        #IF OBJECT TO THE LEFT, GO RIGHT
        #IF OBJECT TO THE RIGHT, GO LEFT 
        #IF OBJECT STRAIT AHEAD, IF WHITE CONTOURS > A SPECIFIC NUMBER, GO RIGHT
        #ELSE GO LEFT
        #I made this function have access to the contours_silver variable from the calibration node 
        #I believe the variable that gives you the contours_siver variable is called msg.data
        try:
            if obstacle_detected == 0.1:
                #We are noe entering the part of the coder where we manuver around an object, these values can be tweaked
                if min_angle > 0:
                    #Cone is to the left
                    if min_angle < 60:
                        #This function is to make the car turn to the left side to begin moving around the cone
                        self.twist_cmd.angular.z = 0.4
                        self.twist_cmd.linear.x = 0.1
                    else:
                        #By now the car should be facing off to the left and is ready to make a curved path around the cone 
                        self.twist_cmd.linear.x = 0.4 
                        self.twist_cmd.angular.z = 0.2
                else:
                    #Cone is strait ahead or to the right
                    if msg.data > 2:
                        #The white line is dotted and we can go to the right 
                        abs_min_angle = abs(min_angle) #This is to take into account that the angle will be negative if the object is to the left
                        if abs_min_angle < 60:
                            #The car will start turning to the right 
                            self.twist_cmd.angular.z = -0.4
                            self.twist_cmd.linear.x = 0.1 
                        else:
                            #Now the car is turned to the right side, it is time for it to make a curved path around the cone 
                            self.twist_cmd.linear.x = 0.4 
                            self.twist_cmd.angular.z = -0.2
                    else:
                        #The white line is solid and we need to go to the left 
                        if min_angle < 60:
                            #This function is to make the car turn to the left side to begin moving around the cone
                            self.twist_cmd.angular.z = 0.4
                            self.twist_cmd.linear.x = 0.1
                        else:
                            #By now the car should be facing off to the left and is ready to make a curved path around the cone 
                            self.twist_cmd.linear.x = 0.4 
                            self.twist_cmd.angular.z = 0.2
            #Obstacle not detected, we can go forth with the follow the yellow line sequence
            else:
            # publish control signals
            self.twist_cmd.angular.z = steering_float
            self.twist_cmd.linear.x = throttle_float
            self.twist_publisher.publish(self.twist_cmd)

            # shift current time and error values to previous values
            self.ek_1 = self.ek

        except KeyboardInterrupt:
            self.twist_cmd.linear.x = self.zero_throttle
            self.twist_publisher.publish(self.twist_cmd)
        
        
    def clamp(self, value, upper_bound, lower_bound=None):
        if lower_bound==None:
            lower_bound = -upper_bound # making lower bound symmetric about zero
        if value < lower_bound:
            value_c = lower_bound
        elif value > upper_bound:
            value_c = upper_bound
        else:
            value_c = value
        return value_c 


def main(args=None):
    rclpy.init(args=args)
    path_planner_publisher = PathPlanner()
    try:
        rclpy.spin(path_planner_publisher)
        path_planner_publisher.destroy_node()
        rclpy.shutdown()
    except KeyboardInterrupt:
        path_planner_publisher.get_logger().info(f'Shutting down {NODE_NAME}...')
        path_planner_publisher.twist_cmd.linear.x = path_planner_publisher.zero_throttle
        path_planner_publisher.twist_publisher.publish(path_planner_publisher.twist_cmd)
        time.sleep(1)
        path_planner_publisher.destroy_node()
        rclpy.shutdown()
        path_planner_publisher.get_logger().info(f'{NODE_NAME} shut down successfully.')


if __name__ == '__main__':
    main()
